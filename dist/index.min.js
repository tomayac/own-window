const installStringReflection=(n,t,o=t)=>{Object.defineProperty(n,o,{enumerable:!0,get(){const e=this.getAttribute(t);return e===null?"":e},set(e){this.setAttribute(t,e)}})},template=document.createElement("template");template.innerHTML=`
<style>
  :host {
    display: block;
  }
</style>
<slot><button type="button"></slot>`;class OwnWindow extends HTMLElement{#t;#e;constructor(){super(),installStringReflection(this,"href"),installStringReflection(this,"buttontext"),this.attachShadow({mode:"open"}),this.shadowRoot.append(template.content.cloneNode(!0)),this.#t=!1,this.#e=this.shadowRoot.querySelector("button"),this.addEventListener("click",()=>{this.#t&&window.open(this.href)})}connectedCallback(){this.href=location.href,this.buttontext="Click to open in its own window.";try{this.#t=window.self!==window.top}catch{this.#t=!0}this.#t||(this.style.display="none")}static get observedAttributes(){return["href","buttontext"]}attributeChangedCallback(t,o,e){t==="buttontext"&&this.#e&&(this.#e.textContent=e)}}customElements.define("own-window",OwnWindow);
